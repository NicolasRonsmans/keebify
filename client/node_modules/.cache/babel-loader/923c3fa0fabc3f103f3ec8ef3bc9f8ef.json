{"ast":null,"code":"import { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\nimport { KEYS } from '../constants';\nimport { createKeycap } from './helpers';\nconst library = {};\nlet current;\n\nasync function load(profile) {\n  const keyType = KEYS[profile];\n  current = profile; // Already loaded.\n\n  if (library[profile]) {\n    return Promise.resolve();\n  } else {\n    library[profile] = {};\n  }\n\n  return new Promise(resolve => {\n    const toLoad = [];\n    const loader = new STLLoader();\n\n    function load() {\n      if (toLoad.length === 0) {\n        return resolve();\n      }\n\n      const name = toLoad.shift();\n      const path = `${keyType.PATH}${name}.stl`;\n      loader.load(path, geometry => {\n        console.log(`${name} loaded`);\n        library[current][name] = geometry;\n        load();\n      });\n    }\n\n    keyType.ROWS.forEach(row => {\n      keyType.SIZES.forEach(size => {\n        const name = `${size.key}u-r${row}`;\n        toLoad.push(name);\n      });\n    });\n    load();\n  });\n}\n\nfunction create(name, bg, key) {\n  const geometry = library[current][name];\n\n  if (!geometry) {\n    return null;\n  }\n\n  const mesh = createKeycap(geometry, bg);\n  return mesh;\n}\n\nexport default {\n  load,\n  create\n};","map":{"version":3,"sources":["/usr/src/app/src/components/Three/lib/Keycap.ts"],"names":["STLLoader","KEYS","createKeycap","library","current","load","profile","keyType","Promise","resolve","toLoad","loader","length","name","shift","path","PATH","geometry","console","log","ROWS","forEach","row","SIZES","size","key","push","create","bg","mesh"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sCAA1B;AAEA,SAASC,IAAT,QAAqB,cAArB;AAEA,SAASC,YAAT,QAA6B,WAA7B;AAEA,MAAMC,OAAoB,GAAG,EAA7B;AACA,IAAIC,OAAJ;;AAEA,eAAeC,IAAf,CAAoBC,OAApB,EAAyC;AACvC,QAAMC,OAAO,GAAGN,IAAI,CAACK,OAAD,CAApB;AAEAF,EAAAA,OAAO,GAAGE,OAAV,CAHuC,CAKvC;;AACA,MAAIH,OAAO,CAACG,OAAD,CAAX,EAAsB;AACpB,WAAOE,OAAO,CAACC,OAAR,EAAP;AACD,GAFD,MAEO;AACLN,IAAAA,OAAO,CAACG,OAAD,CAAP,GAAmB,EAAnB;AACD;;AAED,SAAO,IAAIE,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAMC,MAAgB,GAAG,EAAzB;AACA,UAAMC,MAAM,GAAG,IAAIX,SAAJ,EAAf;;AAEA,aAASK,IAAT,GAAgB;AACd,UAAIK,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACvB,eAAOH,OAAO,EAAd;AACD;;AAED,YAAMI,IAAI,GAAGH,MAAM,CAACI,KAAP,EAAb;AACA,YAAMC,IAAI,GAAI,GAAER,OAAO,CAACS,IAAK,GAAEH,IAAK,MAApC;AAEAF,MAAAA,MAAM,CAACN,IAAP,CAAYU,IAAZ,EAAkBE,QAAQ,IAAI;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAa,GAAEN,IAAK,SAApB;AACAV,QAAAA,OAAO,CAACC,OAAD,CAAP,CAAiBS,IAAjB,IAAyBI,QAAzB;AACAZ,QAAAA,IAAI;AACL,OAJD;AAKD;;AAEDE,IAAAA,OAAO,CAACa,IAAR,CAAaC,OAAb,CAAqBC,GAAG,IAAI;AAC1Bf,MAAAA,OAAO,CAACgB,KAAR,CAAcF,OAAd,CAAsBG,IAAI,IAAI;AAC5B,cAAMX,IAAI,GAAI,GAAEW,IAAI,CAACC,GAAI,MAAKH,GAAI,EAAlC;AAEAZ,QAAAA,MAAM,CAACgB,IAAP,CAAYb,IAAZ;AACD,OAJD;AAKD,KAND;AAQAR,IAAAA,IAAI;AACL,GA5BM,CAAP;AA6BD;;AAED,SAASsB,MAAT,CAAgBd,IAAhB,EAA8Be,EAA9B,EAA0CH,GAA1C,EAAuD;AACrD,QAAMR,QAAQ,GAAGd,OAAO,CAACC,OAAD,CAAP,CAAiBS,IAAjB,CAAjB;;AAEA,MAAI,CAACI,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,QAAMY,IAAI,GAAG3B,YAAY,CAACe,QAAD,EAAWW,EAAX,CAAzB;AAEA,SAAOC,IAAP;AACD;;AAED,eAAe;AACbxB,EAAAA,IADa;AAEbsB,EAAAA;AAFa,CAAf","sourcesContent":["import { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n\nimport { KEYS } from '../constants';\nimport { KeysLibrary, KeyProfile } from '../types';\nimport { createKeycap } from './helpers';\n\nconst library: KeysLibrary = {};\nlet current: KeyProfile;\n\nasync function load(profile: KeyProfile) {\n  const keyType = KEYS[profile];\n\n  current = profile;\n\n  // Already loaded.\n  if (library[profile]) {\n    return Promise.resolve();\n  } else {\n    library[profile] = {};\n  }\n\n  return new Promise(resolve => {\n    const toLoad: string[] = [];\n    const loader = new STLLoader();\n\n    function load() {\n      if (toLoad.length === 0) {\n        return resolve();\n      }\n\n      const name = toLoad.shift() as string;\n      const path = `${keyType.PATH}${name}.stl`;\n\n      loader.load(path, geometry => {\n        console.log(`${name} loaded`);\n        library[current][name] = geometry;\n        load();\n      });\n    }\n\n    keyType.ROWS.forEach(row => {\n      keyType.SIZES.forEach(size => {\n        const name = `${size.key}u-r${row}`;\n\n        toLoad.push(name);\n      });\n    });\n\n    load();\n  });\n}\n\nfunction create(name: string, bg: string, key: string) {\n  const geometry = library[current][name];\n\n  if (!geometry) {\n    return null;\n  }\n\n  const mesh = createKeycap(geometry, bg);\n\n  return mesh;\n}\n\nexport default {\n  load,\n  create,\n};\n"]},"metadata":{},"sourceType":"module"}