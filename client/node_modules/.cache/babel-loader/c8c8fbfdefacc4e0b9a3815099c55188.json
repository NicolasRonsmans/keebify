{"ast":null,"code":"import { isString, isObject } from 'lodash';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { LAYOUTS, CAMERA } from '../constants';\nimport { createKeyprint } from './helpers';\nimport Keycap from './Keycap'; // let el, scene, camera, renderer, controls;\n\nclass Three {\n  constructor(el) {\n    this.el = void 0;\n    this.scene = void 0;\n    this.camera = void 0;\n    this.renderer = void 0;\n    this.controls = void 0;\n\n    this.render = () => {\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(this.render);\n    };\n\n    this.el = el;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(CAMERA.FOV, CAMERA.ASPECT, CAMERA.NEAR, CAMERA.FAR);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      logarithmicDepthBuffer: true\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.init();\n  }\n\n  async init() {\n    this.setupScene();\n    this.setupLights();\n    this.setupCamera();\n    this.setupGround();\n    this.setupControls();\n    this.setupRenderer();\n    this.setupListeners();\n    this.render();\n    await Keycap.load('CHERRY_MX');\n    this.buildLayout();\n  }\n\n  setupScene() {\n    this.scene.background = new THREE.Color(0xa0a0a0);\n    this.scene.fog = new THREE.Fog(0xa0a0a0, 200, 1000);\n  }\n\n  setupLights() {\n    const hemiLight = new THREE.HemisphereLight(0xffffff, 0.5);\n    const dirLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    hemiLight.position.set(0, 200, 0);\n    dirLight.position.set(0, 200, 100);\n    dirLight.shadow.camera.top = 180;\n    dirLight.shadow.camera.bottom = -100;\n    dirLight.shadow.camera.left = -120;\n    dirLight.shadow.camera.right = 120;\n    dirLight.castShadow = true;\n    this.scene.add(hemiLight, dirLight);\n  }\n\n  setupCamera() {\n    const ptLight = new THREE.PointLight(0xffffff, 0.5);\n    this.camera.position.set(200, 100, 200);\n    this.camera.add(ptLight);\n    this.scene.add(this.camera);\n  }\n\n  setupGround() {\n    const ground = new THREE.Mesh(new THREE.PlaneBufferGeometry(2000, 2000), new THREE.MeshPhongMaterial({\n      color: 0x999999,\n      depthWrite: false\n    }));\n    ground.position.set(0, 0, 0);\n    ground.rotation.set(-Math.PI / 2, 0, 0);\n    ground.receiveShadow = true;\n    this.scene.add(ground);\n  }\n\n  setupControls() {\n    this.controls.update();\n  }\n\n  setupRenderer() {\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.el.appendChild(this.renderer.domElement);\n  }\n\n  setupListeners() {\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  buildLayout() {\n    let bg = '#ccc';\n    let fg = '#333';\n    let size = 1;\n    let x = 0;\n    let z = 0;\n    const group = new THREE.Group();\n    LAYOUTS.DEFAULT_60_PERCENT.KEYS.forEach((row, rowIndex) => {\n      const rowType = LAYOUTS.DEFAULT_60_PERCENT.ROWS[rowIndex];\n      row.forEach(key => {\n        if (isObject(key)) {\n          if (key.w) {\n            size = key.w;\n          }\n\n          if (key.c) {\n            bg = key.c;\n          }\n\n          if (key.t) {\n            fg = key.t;\n          }\n        } else if (isString(key)) {\n          const name = `${size}u-r${rowType}`;\n          const posX = (18 + 1) * size;\n          const keycap = Keycap.create(name, bg, key); // console.log(keycap);\n\n          if (!keycap) {\n            return;\n          }\n\n          keycap.position.set(x + posX * 0.5, 10, z);\n          group.add(keycap);\n\n          if (key) {\n            const keyprint = createKeyprint(key, size, rowType, fg);\n\n            const {\n              posZ,\n              posY,\n              rotation\n            } = (() => {\n              const base = -Math.PI / 2;\n              const unit = Math.PI / 90;\n              let posZ = z;\n              let posY = 20;\n              let rotation = base;\n\n              switch (rowType) {\n                case '1':\n                  posZ -= 1.9;\n                  posY = 10 + 8.9;\n                  rotation += -4.5 * unit;\n                  break;\n\n                case '2':\n                  posZ -= 1.9;\n                  posY = 10 + 8.5;\n                  rotation += -2.6 * unit;\n                  break;\n\n                case '3':\n                  posZ -= 1.8;\n                  posY = 10 + 9.05;\n                  rotation += -0.5 * unit;\n                  break;\n\n                case '4':\n                  posZ -= 1.8;\n                  posY = 10 + 11;\n                  rotation += +1.2 * unit;\n                  break;\n              }\n\n              return {\n                posZ,\n                posY,\n                rotation\n              };\n            })();\n\n            keyprint.position.set(x + posX * 0.5, posY, posZ);\n            keyprint.rotation.set(rotation, 0, 0);\n            group.add(keyprint);\n          }\n\n          x += posX;\n          size = 1;\n        }\n      });\n      x = 0;\n      z += 19;\n    });\n    this.scene.add(group); // Center group\n\n    const box = new THREE.Box3().setFromObject(group);\n    const boundingBoxSize = box.max.sub(box.min);\n    const width = boundingBoxSize.x;\n    const height = boundingBoxSize.z;\n    group.position.x = -width / 2;\n    group.position.z = -height / 2;\n  }\n\n  handleResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n}\n\nexport default Three;","map":{"version":3,"sources":["/usr/src/app/src/components/Three/lib/Three.ts"],"names":["isString","isObject","THREE","OrbitControls","LAYOUTS","CAMERA","createKeyprint","Keycap","Three","constructor","el","scene","camera","renderer","controls","render","requestAnimationFrame","Scene","PerspectiveCamera","FOV","ASPECT","NEAR","FAR","WebGLRenderer","antialias","logarithmicDepthBuffer","domElement","init","setupScene","setupLights","setupCamera","setupGround","setupControls","setupRenderer","setupListeners","load","buildLayout","background","Color","fog","Fog","hemiLight","HemisphereLight","dirLight","DirectionalLight","position","set","shadow","top","bottom","left","right","castShadow","add","ptLight","PointLight","ground","Mesh","PlaneBufferGeometry","MeshPhongMaterial","color","depthWrite","rotation","Math","PI","receiveShadow","update","shadowMap","enabled","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","appendChild","addEventListener","handleResize","bg","fg","size","x","z","group","Group","DEFAULT_60_PERCENT","KEYS","forEach","row","rowIndex","rowType","ROWS","key","w","c","t","name","posX","keycap","create","keyprint","posZ","posY","base","unit","box","Box3","setFromObject","boundingBoxSize","max","sub","min","width","height","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["import { isString, isObject } from 'lodash';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport { LAYOUTS, CAMERA } from '../constants';\nimport { LayoutKey } from '../types';\nimport { createKeyprint } from './helpers';\nimport Keycap from './Keycap';\n\n// let el, scene, camera, renderer, controls;\n\nclass Three {\n  el: HTMLDivElement;\n  scene: THREE.Scene;\n  camera: THREE.PerspectiveCamera;\n  renderer: THREE.WebGLRenderer;\n  controls: OrbitControls;\n\n  constructor(el: HTMLDivElement) {\n    this.el = el;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      CAMERA.FOV,\n      CAMERA.ASPECT,\n      CAMERA.NEAR,\n      CAMERA.FAR\n    );\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      logarithmicDepthBuffer: true,\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.init();\n  }\n\n  async init() {\n    this.setupScene();\n    this.setupLights();\n    this.setupCamera();\n    this.setupGround();\n    this.setupControls();\n    this.setupRenderer();\n    this.setupListeners();\n\n    this.render();\n    await Keycap.load('CHERRY_MX');\n    this.buildLayout();\n  }\n\n  setupScene() {\n    this.scene.background = new THREE.Color(0xa0a0a0);\n    this.scene.fog = new THREE.Fog(0xa0a0a0, 200, 1000);\n  }\n\n  setupLights() {\n    const hemiLight = new THREE.HemisphereLight(0xffffff, 0.5);\n    const dirLight = new THREE.DirectionalLight(0xffffff, 0.5);\n\n    hemiLight.position.set(0, 200, 0);\n    dirLight.position.set(0, 200, 100);\n    dirLight.shadow.camera.top = 180;\n    dirLight.shadow.camera.bottom = -100;\n    dirLight.shadow.camera.left = -120;\n    dirLight.shadow.camera.right = 120;\n    dirLight.castShadow = true;\n\n    this.scene.add(hemiLight, dirLight);\n  }\n\n  setupCamera() {\n    const ptLight = new THREE.PointLight(0xffffff, 0.5);\n\n    this.camera.position.set(200, 100, 200);\n    this.camera.add(ptLight);\n    this.scene.add(this.camera);\n  }\n\n  setupGround() {\n    const ground = new THREE.Mesh(\n      new THREE.PlaneBufferGeometry(2000, 2000),\n      new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false })\n    );\n\n    ground.position.set(0, 0, 0);\n    ground.rotation.set(-Math.PI / 2, 0, 0);\n    ground.receiveShadow = true;\n\n    this.scene.add(ground);\n  }\n\n  setupControls() {\n    this.controls.update();\n  }\n\n  setupRenderer() {\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.el.appendChild(this.renderer.domElement);\n  }\n\n  setupListeners() {\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  render = () => {\n    this.renderer.render(this.scene, this.camera);\n    requestAnimationFrame(this.render);\n  };\n\n  buildLayout() {\n    let bg: string = '#ccc';\n    let fg: string = '#333';\n    let size: number = 1;\n    let x: number = 0;\n    let z: number = 0;\n    const group: THREE.Group = new THREE.Group();\n\n    LAYOUTS.DEFAULT_60_PERCENT.KEYS.forEach(\n      (row: LayoutKey[], rowIndex: number) => {\n        const rowType = LAYOUTS.DEFAULT_60_PERCENT.ROWS[rowIndex];\n\n        row.forEach((key: LayoutKey) => {\n          if (isObject(key)) {\n            if (key.w) {\n              size = key.w;\n            }\n\n            if (key.c) {\n              bg = key.c;\n            }\n\n            if (key.t) {\n              fg = key.t;\n            }\n          } else if (isString(key)) {\n            const name = `${size}u-r${rowType}`;\n            const posX = (18 + 1) * size;\n            const keycap = Keycap.create(name, bg, key);\n\n            // console.log(keycap);\n            if (!keycap) {\n              return;\n            }\n\n            keycap.position.set(x + posX * 0.5, 10, z);\n\n            group.add(keycap);\n\n            if (key) {\n              const keyprint = createKeyprint(key, size, rowType, fg);\n              const { posZ, posY, rotation } = (() => {\n                const base = -Math.PI / 2;\n                const unit = Math.PI / 90;\n                let posZ: number = z;\n                let posY: number = 20;\n                let rotation: number = base;\n\n                switch (rowType) {\n                  case '1':\n                    posZ -= 1.9;\n                    posY = 10 + 8.9;\n                    rotation += -4.5 * unit;\n                    break;\n                  case '2':\n                    posZ -= 1.9;\n                    posY = 10 + 8.5;\n                    rotation += -2.6 * unit;\n                    break;\n                  case '3':\n                    posZ -= 1.8;\n                    posY = 10 + 9.05;\n                    rotation += -0.5 * unit;\n                    break;\n                  case '4':\n                    posZ -= 1.8;\n                    posY = 10 + 11;\n                    rotation += +1.2 * unit;\n                    break;\n                }\n\n                return { posZ, posY, rotation };\n              })();\n              keyprint.position.set(x + posX * 0.5, posY, posZ);\n              keyprint.rotation.set(rotation, 0, 0);\n              group.add(keyprint);\n            }\n\n            x += posX;\n            size = 1;\n          }\n        });\n\n        x = 0;\n        z += 19;\n      }\n    );\n\n    this.scene.add(group);\n\n    // Center group\n    const box = new THREE.Box3().setFromObject(group);\n    const boundingBoxSize = box.max.sub(box.min);\n    const width = boundingBoxSize.x;\n    const height = boundingBoxSize.z;\n    group.position.x = -width / 2;\n    group.position.z = -height / 2;\n  }\n\n  handleResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n}\n\nexport default Three;\n"]},"metadata":{},"sourceType":"module"}