{"ast":null,"code":"import * as THREE from 'three';\nimport { KEYS } from '../../constants';\n\nfunction createKeyprint(text, size, rowType, color) {\n  const {\n    width,\n    height\n  } = (() => {\n    let width, height;\n\n    switch (size) {\n      case 1.25:\n        width = KEYS.CHERRY_MX.SIZES[1].value;\n        break;\n\n      case 1.5:\n        width = KEYS.CHERRY_MX.SIZES[2].value;\n        break;\n\n      case 1.75:\n        width = KEYS.CHERRY_MX.SIZES[3].value;\n        break;\n\n      case 2:\n        width = KEYS.CHERRY_MX.SIZES[4].value;\n        break;\n\n      case 2.25:\n        width = KEYS.CHERRY_MX.SIZES[5].value;\n        break;\n\n      case 2.5:\n        width = KEYS.CHERRY_MX.SIZES[6].value;\n        break;\n\n      case 2.75:\n        width = KEYS.CHERRY_MX.SIZES[7].value;\n        break;\n\n      case 6.25:\n        width = KEYS.CHERRY_MX.SIZES[8].value;\n        break;\n\n      case 1:\n      default:\n        width = KEYS.CHERRY_MX.SIZES[0].value;\n    }\n\n    switch (rowType) {\n      case '1':\n        height = 14;\n        break;\n\n      case '2':\n        height = 14.1;\n        break;\n\n      case '3':\n        height = 14;\n        break;\n\n      case '4':\n        height = 14;\n        break;\n\n      default:\n        height = 14;\n    }\n\n    return {\n      width,\n      height\n    };\n  })();\n\n  const factor = 12;\n  const padding = 1.1 * factor;\n  const ctx = document.createElement('canvas').getContext('2d');\n  ctx.canvas.height = height * factor;\n  ctx.canvas.width = width * factor;\n  ctx.font = 'bold 40px Helvetica, Arial, sans-serif'; // ctx.fillStyle = 'grey';\n  // ctx.fillRect(0, 0, width * factor, height * factor);\n\n  const chars = text.split('\\n');\n  chars.forEach((char, index) => {\n    let textBaseline = 'middle';\n    let y = padding;\n\n    if (index === 0) {\n      textBaseline = 'top';\n    } else if (index === 1) {\n      textBaseline = 'bottom';\n      y = height * factor - padding;\n    }\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = textBaseline;\n    ctx.fillStyle = color;\n    ctx.fillText(char, padding, y, 100 * factor);\n  });\n  ctx.scale(1 / factor, 1 / factor);\n  const texture = new THREE.CanvasTexture(ctx.canvas);\n  const geometry = new THREE.PlaneGeometry(width, height);\n  texture.minFilter = THREE.LinearFilter;\n  texture.wrapS = THREE.ClampToEdgeWrapping;\n  texture.wrapT = THREE.ClampToEdgeWrapping;\n  texture.needsUpdate = true;\n  const material = new THREE.MeshPhongMaterial({\n    map: texture,\n    specular: 0x111111,\n    transparent: true\n  });\n  const mesh = new THREE.Mesh(geometry, material);\n  return mesh;\n}\n\nexport default createKeyprint;","map":{"version":3,"sources":["/usr/src/app/src/components/Three/lib/helpers/createKeyprint.ts"],"names":["THREE","KEYS","createKeyprint","text","size","rowType","color","width","height","CHERRY_MX","SIZES","value","factor","padding","ctx","document","createElement","getContext","canvas","font","chars","split","forEach","char","index","textBaseline","y","textAlign","fillStyle","fillText","scale","texture","CanvasTexture","geometry","PlaneGeometry","minFilter","LinearFilter","wrapS","ClampToEdgeWrapping","wrapT","needsUpdate","material","MeshPhongMaterial","map","specular","transparent","mesh","Mesh"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\nimport { KEYS } from '../../constants';\n\nfunction createKeyprint(\n  text: string,\n  size: number,\n  rowType: string,\n  color: string\n) {\n  const { width, height } = (() => {\n    let width, height;\n\n    switch (size) {\n      case 1.25:\n        width = KEYS.CHERRY_MX.SIZES[1].value;\n        break;\n      case 1.5:\n        width = KEYS.CHERRY_MX.SIZES[2].value;\n        break;\n      case 1.75:\n        width = KEYS.CHERRY_MX.SIZES[3].value;\n        break;\n      case 2:\n        width = KEYS.CHERRY_MX.SIZES[4].value;\n        break;\n      case 2.25:\n        width = KEYS.CHERRY_MX.SIZES[5].value;\n        break;\n      case 2.5:\n        width = KEYS.CHERRY_MX.SIZES[6].value;\n        break;\n      case 2.75:\n        width = KEYS.CHERRY_MX.SIZES[7].value;\n        break;\n      case 6.25:\n        width = KEYS.CHERRY_MX.SIZES[8].value;\n        break;\n      case 1:\n      default:\n        width = KEYS.CHERRY_MX.SIZES[0].value;\n    }\n\n    switch (rowType) {\n      case '1':\n        height = 14;\n        break;\n      case '2':\n        height = 14.1;\n        break;\n      case '3':\n        height = 14;\n        break;\n      case '4':\n        height = 14;\n        break;\n      default:\n        height = 14;\n    }\n\n    return { width, height };\n  })();\n  const factor = 12;\n  const padding = 1.1 * factor;\n  const ctx = document\n    .createElement('canvas')\n    .getContext('2d') as CanvasRenderingContext2D;\n\n  ctx.canvas.height = height * factor;\n  ctx.canvas.width = width * factor;\n\n  ctx.font = 'bold 40px Helvetica, Arial, sans-serif';\n\n  // ctx.fillStyle = 'grey';\n  // ctx.fillRect(0, 0, width * factor, height * factor);\n\n  const chars = text.split('\\n');\n\n  chars.forEach((char: string, index: number) => {\n    let textBaseline: CanvasTextBaseline = 'middle';\n    let y = padding;\n\n    if (index === 0) {\n      textBaseline = 'top';\n    } else if (index === 1) {\n      textBaseline = 'bottom';\n      y = height * factor - padding;\n    }\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = textBaseline;\n    ctx.fillStyle = color;\n    ctx.fillText(char, padding, y, 100 * factor);\n  });\n\n  ctx.scale(1 / factor, 1 / factor);\n\n  const texture = new THREE.CanvasTexture(ctx.canvas);\n  const geometry = new THREE.PlaneGeometry(width, height);\n\n  texture.minFilter = THREE.LinearFilter;\n  texture.wrapS = THREE.ClampToEdgeWrapping;\n  texture.wrapT = THREE.ClampToEdgeWrapping;\n  texture.needsUpdate = true;\n\n  const material = new THREE.MeshPhongMaterial({\n    map: texture,\n    specular: 0x111111,\n    transparent: true,\n  });\n  const mesh = new THREE.Mesh(geometry, material);\n\n  return mesh;\n}\n\nexport default createKeyprint;\n"]},"metadata":{},"sourceType":"module"}